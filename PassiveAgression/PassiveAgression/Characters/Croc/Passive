using RoR2;
using RoR2.Skills;
using EntityStates;
using System;
using R2API;
using MonoMod.Cil;
using Mono.Cecil.Cil;
using UnityEngine;

namespace PassiveAgression.Croc
{
     public class CrocoDamageTypeSkillDef : SkillDef{
         public DamageAPI.ModdedDamageType damageType;

     }
    public static class BeetlePassive{
     public static AssignableSkillDef def;
     public static SkillFamily slot;
     public static DamageAPI.ModdedDamageType damageType;
     public static bool isHooked = false;


     static BeetlePassive(){
         LanguageAPI.Add("PASSIVEAGRESSION_CROCBEETLE","Beetle Juice");
         LanguageAPI.Add("PASSIVEAGRESSION_CROCBEETLE_DESC","Beetlejuice.");
         damageType = DamageAPI.ReserveDamageType();
         def = ScriptableObject.CreateInstance<AssignableSkillDef>();
         def.skillNameToken = "PASSIVEAGRESSION_CROCBEETLE";
         (def as ScriptableObject).name = def.skillNameToken;
         def.skillDescriptionToken = "PASSIVEAGRESSION_CROCBEETLE_DESC";
         def.onAssign = (GenericSkill slot) => {
             if(!isHooked){
                isHooked = true;
                On.RoR2.HealthComponent.TakeDamage += (orig,self,damage) => {
                    orig(self,damage);
                    if(DamageAPI.HasModdedDamageType(damage,damageType)){
                      self.body.AddTimedBuff(RoR2Content.Buffs.BeetleJuice,5f);
                    }
                };
             }
                DamageAPI.AddModdedDamageType(slot.GetComponent<CrocoDamageTypeController>(),damageType);
             return null;
         };
         def.onUnassign = (GenericSkill slot) =>{
                DamageAPI.RemoveModdedDamageType(slot.GetComponent<CrocoDamageTypeController>(),damageType);
         };
         def.baseRechargeInterval = 0f;
     }
    }
}
